/*********
   CTIS164 - Template Source Program
----------
STUDENT : Hamza Rafi - 21701560
SECTION : 1
HOMEWORK: 1
----------
PROBLEMS: none.
----------
ADDITIONAL FEATURES:
1-ON-Click the backgroung changes from day to night and vice versa.
2-The speed of the cars is randomly generated.
3- On resizing the window, the wall pattren does not get affected 

*********/

#ifdef _MSC_VER
#define _CRT_SECURE_NO_WARNINGS
#endif
#include <GL/glut.h>
#include <stdio.h>
#include <stdlib.h>
#include <math.h>
#include <string.h>
#include <stdarg.h>

#define WINDOW_WIDTH  800
#define WINDOW_HEIGHT 600

#define TIMER_PERIOD  10 // Period for the timer.
#define TIMER_ON         1 // 0:disable timer, 1:enable timer

#define D2R 0.0174532


bool activetimer = false;
bool day = true;

/* Global Variables for Template File */
bool up = false, down = false, right = false, left = false;
int  winWidth=800, winHeight=600; // current Window width and height
int CX = -300, CY = -190; //fixed point of car

typedef struct {
	bool back;
	int x, y;
}car_t;

car_t C[2];

void intialiseStruct()
{
	for (int i = 0; i < 2; i++)
	{
		C[i].x = CX;
		C[i].y = CY+100*i;
		C[i].back = false;
	}
}


//
// to draw circle, center at (x,y)
// radius r
//
void circle(int x, int y, int r)
{
#define PI 3.1415
	float angle;
	glBegin(GL_POLYGON);
	for (int i = 0; i < 100; i++)
	{
		angle = 2 * PI*i / 100;
		glVertex2f(x + r * cos(angle), y + r * sin(angle));
	}
	glEnd();
}

void circle_wire(int x, int y, int r)
{
#define PI 3.1415
	float angle;

	glBegin(GL_LINE_LOOP);
	for (int i = 0; i < 100; i++)
	{
		angle = 2 * PI*i / 100;
		glVertex2f(x + r * cos(angle), y + r * sin(angle));
	}
	glEnd();
}

void print(int x, int y, const char *string, void *font)
{
	int len, i;

	glRasterPos2f(x, y);
	len = (int)strlen(string);
	for (i = 0; i < len; i++)
	{
		glutBitmapCharacter(font, string[i]);
	}
}

// display text with variables.
// vprint(-winWidth / 2 + 10, winHeight / 2 - 20, GLUT_BITMAP_8_BY_13, "ERROR: %d", numClicks);
void vprint(int x, int y, void *font, const char *string, ...)
{
	va_list ap;
	va_start(ap, string);
	char str[1024];
	vsprintf_s(str, string, ap);
	va_end(ap);

	int len, i;
	glRasterPos2f(x, y);
	len = (int)strlen(str);
	for (i = 0; i < len; i++)
	{
		glutBitmapCharacter(font, str[i]);
	}
}

// vprint2(-50, 0, 0.35, "00:%02d", timeCounter);
void vprint2(int x, int y, float size, const char *string, ...) {
	va_list ap;
	va_start(ap, string);
	char str[1024];
	vsprintf_s(str, string, ap);
	va_end(ap);
	glPushMatrix();
	glTranslatef(x, y, 0);
	glScalef(size, size, 1);

	int len, i;
	len = (int)strlen(str);
	for (i = 0; i < len; i++)
	{
		glutStrokeCharacter(GLUT_STROKE_ROMAN, str[i]);
	}
	glPopMatrix();
}

//
// To display onto window using OpenGL commands
//



void displayVehicle(int cx, int cy, int num, int g)
{

	//Body
	glColor3ub(255, g, 20);
	glBegin(GL_POLYGON);
	glVertex2f(cx, cy);
	glVertex2f(cx, cy + 25);
	glVertex2f(cx + 10, cy + 30);
	glVertex2f(cx + 80, cy + 30);
	glVertex2f(cx + 90, cy + 25);
	glVertex2f(cx + 90, cy);
	glEnd();

	//Windows
	glColor3ub(255, 255, 255);
	glBegin(GL_POLYGON);
	glVertex2f(cx + 20, cy + 30);
	glVertex2f(cx + 30, cy + 40);
	glVertex2f(cx + 60, cy + 40);
	glVertex2f(cx + 70, cy + 30);
	glEnd();

	//Wheels
	glColor3ub(0, 0, 0);
	circle(cx + 20, cy, 10);
	circle(cx + 70, cy, 10);
	glColor3ub(255, 255, 255);
	circle(cx + 20, cy, 5);
	circle(cx + 70, cy, 5);

	//Partitions
	glColor3ub(0, 0, 0);
	glBegin(GL_LINES);
	//Window Partion
	glVertex2f(cx + 45, cy + 40);
	glVertex2f(cx + 45, cy + 30);
	//DoorHandle1
	glVertex2f(cx + 50, cy + 25);
	glVertex2f(cx + 55, cy + 25);
	//DoorHandle2
	glVertex2f(cx + 25, cy + 25);
	glVertex2f(cx + 30, cy + 25);
	//Door Partition
	glVertex2f(cx + 45, cy + 28);
	glVertex2f(cx + 45, cy + 2);
	//Bunker and Bonet Partition
	glVertex2f(cx + 20, cy + 28);
	glVertex2f(cx + 20, cy + 11);
	glVertex2f(cx + 70, cy + 28);
	glVertex2f(cx + 70, cy + 11);
	glEnd();

	//Car Number
	glColor3ub(0, 0, 0);
	vprint(cx + 5, cy + 12, GLUT_BITMAP_9_BY_15, "$");
	vprint(cx + 71, cy + 12, GLUT_BITMAP_9_BY_15, "0%d", num + 1);

}


void displaybackground() {

	//makingWindow

	// set the color to use in draw
	glColor3ub(255, 204, 153);
	// create a window 
	glBegin(GL_QUADS); {
		glVertex2f(-700, -400);
		glVertex2f(-700, 400);
		glVertex2f(700, 400);
		glVertex2f(700, -400);
	} glEnd();

	//pattern on the wall
	glColor3ub(255, 178, 102);
	glLineWidth(5);
	glBegin(GL_LINES); {
		int x1 = -1000,
			x2 = -690;
		while (x1 <= 700)
		{
			glVertex2f(x1, -400);
			glVertex2f(x2, 400);
			x1 += 10;
			x2 += 10;
		}
	} glEnd();

	//Window frame on the wall
	glColor3ub(160, 82, 45);
	glBegin(GL_QUADS); {
		glVertex2f(-350, -250);
		glVertex2f(-350, 250);
		glVertex2f(350, 250);
		glVertex2f(350, -250);
	} glEnd();
	glColor4ub(255, 255, 255, 255);
	glColor4ub(135, 206, 250, 200);
	glBegin(GL_QUADS); {
		glVertex2f(-325, -225);
		glVertex2f(-325, 225);
		glVertex2f(325, 225);
		glVertex2f(325, -225);
	} glEnd();
	//boundries of the window frame
	glColor3ub(0, 0, 0);
	glLineWidth(1);
	glBegin(GL_LINES); {
		glVertex2f(-350, -250);
		glVertex2f(-350, 250);
		glVertex2f(350, 250);
		glVertex2f(350, -250);
	} glEnd();
	glBegin(GL_LINES); {
		glVertex2f(-325, -225);
		glVertex2f(-325, 225);
		glVertex2f(325, 225);
		glVertex2f(325, -225);
	} glEnd();
	glBegin(GL_LINES); {
		glVertex2f(-350, -250);
		glVertex2f(350, -250);
		glVertex2f(-350, 250);
		glVertex2f(350, 250);
	} glEnd();
	glBegin(GL_LINES); {
		glVertex2f(-325, -225);
		glVertex2f(325, -225);
		glVertex2f(-325, 225);
		glVertex2f(325, 225);
	} glEnd();

	//handle on the window
	glColor3ub(0, 0, 0);
	glLineWidth(4);
	circle_wire(-25, -237, 4);
	glColor3ub(205, 133, 63);
	circle(-25, -237, 4);
	glBegin(GL_QUAD_STRIP); {
		glVertex2f(-23, -240);
		glVertex2f(-28, -235);
		glVertex2f(-20, -228);
		glVertex2f(-15, -232);
		glVertex2f(20, -228);
		glVertex2f(15, -232);
	} glEnd();


	//label
	glColor3ub(160, 82, 45);
	circle(0, 300, 5);
	glBegin(GL_QUADS); {
		glVertex2f(-135, 280);
		glVertex2f(135, 280);
		glVertex2f(135, 260);
		glVertex2f(-135, 260);
	} glEnd();
	glColor3ub(192, 192, 192);
	glBegin(GL_QUADS); {
		glVertex2f(-130, 275);
		glVertex2f(130, 275);
		glVertex2f(130, 263);
		glVertex2f(-130, 263);
	} glEnd();
	glColor3ub(0, 0, 0);
	vprint(-125, 265, GLUT_BITMAP_8_BY_13, "View out of window by Hamza Rafi");
	glLineWidth(1);
	glBegin(GL_LINES); {
		glVertex2f(0, 300);
		glVertex2f(100, 280);
		glVertex2f(0, 300);
		glVertex2f(-100, 280);
	}glEnd();
	

	//Road 
	glColor3ub(32, 32, 32);
	glBegin(GL_QUADS); {
		glVertex2f(-325, -225);
		glVertex2f(-325, -50);
		glVertex2f(325, -50);
		glVertex2f(325, -225);
	} glEnd();
	glColor3ub(255, 255, 255);
	glBegin(GL_QUADS); {
		glVertex2f(-300, -125);
		glVertex2f(-280, -115);
		glVertex2f(-100, -115);
		glVertex2f(-80, -125);
	} glEnd();
	glBegin(GL_QUADS); {
		glVertex2f(260, -125);
		glVertex2f(240, -115);
		glVertex2f(20, -115);
		glVertex2f(40, -125);
	} glEnd();

	//street lights
	glColor3ub(128, 128, 128);
	glBegin(GL_QUADS); {
		glVertex2f(-200, -50);
		glVertex2f(-200, 150);
		glVertex2f(-190, 150);
		glVertex2f(-190, -50);
	} glEnd();
	glBegin(GL_QUADS); {
		glVertex2f(-170, 130);
		glVertex2f(-200, 150);
		glVertex2f(-190, 150);
		glVertex2f(-160, 130);
	} glEnd();
	circle(-165, 130, 5);
	glBegin(GL_QUADS); {
		glVertex2f(200, -50);
		glVertex2f(200, 150);
		glVertex2f(190, 150);
		glVertex2f(190, -50);
	} glEnd();
	glBegin(GL_QUADS); {
		glVertex2f(200, 150);
		glVertex2f(190, 150);
		glVertex2f(220, 130);
		glVertex2f(230, 130);
	} glEnd();
	circle(225, 130, 5);

	
	//street light on the other side of the street
	glColor3ub(128, 128, 128);
	glBegin(GL_QUADS); {
		glVertex2f(0, -225);
		glVertex2f(0, -5);
		glVertex2f(-10, -5);
		glVertex2f(-10, -225);
	} glEnd();
	glBegin(GL_QUADS); {
		glVertex2f(0, -5);
		glVertex2f(40, 20);
		glVertex2f(30, 20);
		glVertex2f(-10, -5);
	} glEnd();
	circle(34, 20, 6);

	//sun
	glColor3ub(255, 225, 0);
	circle(125, 175, 45);

}

void streetlight() {
	//light from street lamps
	glColor4ub(255, 255, 0, 128);
	glBegin(GL_TRIANGLES); {
		glVertex2f(225, 130);
		glVertex2f(300, -100);
		glVertex2f(150, -100);
	}glEnd();
	glBegin(GL_TRIANGLES); {
		glVertex2f(-165, 130);
		glVertex2f(-240, -100);
		glVertex2f(-90, -100);
	}glEnd();

	//light from street light3
	glColor4ub(255, 255, 0, 128);
	glBegin(GL_TRIANGLES); {
		glVertex2f(34, 20);
		glVertex2f(-51, -225);
		glVertex2f(112, -225);
	}glEnd();


}

//Changes background to night
void night() {
	
	glColor4ub(41, 76, 132, 255);
	glBegin(GL_QUADS); {
		glVertex2f(-325, -50);
		glVertex2f(-325, 225);
		glVertex2f(325, 225);
		glVertex2f(325, -50);
	} glEnd();

	glColor3ub(128, 128, 128);
	glBegin(GL_QUADS); {
		glVertex2f(-200, -50);
		glVertex2f(-200, 150);
		glVertex2f(-190, 150);
		glVertex2f(-190, -50);
	} glEnd();
	glBegin(GL_QUADS); {
		glVertex2f(-170, 130);
		glVertex2f(-200, 150);
		glVertex2f(-190, 150);
		glVertex2f(-160, 130);
	} glEnd();
	circle(-165, 130, 5);
	glBegin(GL_QUADS); {
		glVertex2f(200, -50);
		glVertex2f(200, 150);
		glVertex2f(190, 150);
		glVertex2f(190, -50);
	} glEnd();
	glBegin(GL_QUADS); {
		glVertex2f(200, 150);
		glVertex2f(190, 150);
		glVertex2f(220, 130);
		glVertex2f(230, 130);
	} glEnd();
	circle(225, 130, 5);


	//street light on the other side of the street
	glColor3ub(128, 128, 128);
	glBegin(GL_QUADS); {
		glVertex2f(0, -225);
		glVertex2f(0, -5);
		glVertex2f(-10, -5);
		glVertex2f(-10, -225);
	} glEnd();
	glBegin(GL_QUADS); {
		glVertex2f(0, -5);
		glVertex2f(40, 20);
		glVertex2f(30, 20);
		glVertex2f(-10, -5);
	} glEnd();
	circle(34, 20, 6);

	//moon
	glColor4ub(255, 255, 255, 175);
	circle(125, 175, 45);

	streetlight();

}



void display() {
	//
	// clear window to black
	//
	glClearColor(0, 0, 0, 0);
	glClear(GL_COLOR_BUFFER_BIT);
	if(day)
	displaybackground();
	else {
		displaybackground(); 
		night();
	}
	int g = 255; // to change color of each car
	for (int i = 0; i < 2; i++)
	{
		displayVehicle(C[i].x, C[i].y, i, g);
		g -= 100;
	}
	
	glutSwapBuffers();
}


//
// key function for ASCII charachters like ESC, a,b,c..,A,B,..Z
//
void onKeyDown(unsigned char key, int x, int y)
{
	// exit when ESC is pressed.
	if (key == 27)
		exit(0);
	if (key == 32)
	{
		activetimer = !activetimer;	
	}
	
	// to refresh the window it calls display() function
	glutPostRedisplay();
}

void onKeyUp(unsigned char key, int x, int y)
{
	// exit when ESC is pressed.
	if (key == 27)
		exit(0);

	// to refresh the window it calls display() function
	glutPostRedisplay();
}

//
// Special Key like GLUT_KEY_F1, F2, F3,...
// Arrow Keys, GLUT_KEY_UP, GLUT_KEY_DOWN, GLUT_KEY_RIGHT, GLUT_KEY_RIGHT
//
void onSpecialKeyDown(int key, int x, int y)
{
	// Write your codes here.
	switch (key) {
	case GLUT_KEY_UP: up = true; break;
	case GLUT_KEY_DOWN: down = true; break;
	case GLUT_KEY_LEFT: left = true; break;
	case GLUT_KEY_RIGHT: right = true; break;
	}

	// to refresh the window it calls display() function
	glutPostRedisplay();
}

//
// Special Key like GLUT_KEY_F1, F2, F3,...
// Arrow Keys, GLUT_KEY_UP, GLUT_KEY_DOWN, GLUT_KEY_RIGHT, GLUT_KEY_RIGHT
//
void onSpecialKeyUp(int key, int x, int y)
{
	// Write your codes here.
	switch (key) {
	case GLUT_KEY_UP: up = false; break;
	case GLUT_KEY_DOWN: down = false; break;
	case GLUT_KEY_LEFT: left = false; break;
	case GLUT_KEY_RIGHT: right = false; break;
	}

	// to refresh the window it calls display() function
	glutPostRedisplay();
}

//
// When a click occurs in the window,
// It provides which button
// buttons : GLUT_LEFT_BUTTON , GLUT_RIGHT_BUTTON
// states  : GLUT_UP , GLUT_DOWN
// x, y is the coordinate of the point that mouse clicked.
//
void onClick(int button, int stat, int x, int y)
{
	// Write your codes here.
	if (button == GLUT_LEFT_BUTTON && stat == GLUT_DOWN)
		day = !day;

	// to refresh the window it calls display() function
	glutPostRedisplay();
}

//
// This function is called when the window size changes.
// w : is the new width of the window in pixels.
// h : is the new height of the window in pixels.
//
void onResize(int w, int h)
{
	winWidth = w;
	winHeight = h;
	glViewport(0, 0, w, h);
	glMatrixMode(GL_PROJECTION);
	glLoadIdentity();
	glOrtho(-w / 2, w / 2, -h / 2, h / 2, -1, 1);
	glMatrixMode(GL_MODELVIEW);
	glLoadIdentity();
	display(); // refresh window.
}

void onMoveDown(int x, int y) {
	// Write your codes here.



	// to refresh the window it calls display() function   
	glutPostRedisplay();
}

// GLUT to OpenGL coordinate conversion:
//   x2 = x1 - winWidth / 2
//   y2 = winHeight / 2 - y1
void onMove(int x, int y) {
	// Write your codes here.



	// to refresh the window it calls display() function
	glutPostRedisplay();
}

#if TIMER_ON == 1
void onTimer(int v) {

	glutTimerFunc(TIMER_PERIOD, onTimer, 0);
	// Write your codes here.
	
		if (activetimer)
		{
			//For Forward Movement
			for (int i = 0; i < 2; i++)
				if (C[i].x + 95 < (winWidth - 135) / 2 && C[i].back == false)
					C[i].x += rand() % 4 + 1;
				else
					C[i].back = true;


			//For Reverse Movement
	
				for (int i = 0; i < 2; i++)
					if (C[i].x - 8 >= (-winWidth + 135) / 2 && C[i].back == true)
						C[i].x -= rand() % 4 + 1;
					else
						C[i].back = false;
			
		
	}

	// to refresh the window it calls display() function
	glutPostRedisplay(); // display()

}
#endif

void Init() {

	// Smoothing shapes
	glEnable(GL_BLEND);
	glBlendFunc(GL_SRC_ALPHA, GL_ONE_MINUS_SRC_ALPHA);

}

void main(int argc, char *argv[]) {
	glutInit(&argc, argv);
	glutInitDisplayMode(GLUT_RGB | GLUT_DOUBLE);
	glutInitWindowSize(WINDOW_WIDTH, WINDOW_HEIGHT);
	//glutInitWindowPosition(100, 100);
	glutCreateWindow("HW1- View out of window by Hamza Rafi ");

	glutDisplayFunc(display);
	glutReshapeFunc(onResize);

	//
	// keyboard registration
	//
	glutKeyboardFunc(onKeyDown);
	glutSpecialFunc(onSpecialKeyDown);

	glutKeyboardUpFunc(onKeyUp);
	glutSpecialUpFunc(onSpecialKeyUp);

	//
	// mouse registration
	//
	glutMouseFunc(onClick);
	glutMotionFunc(onMoveDown);
	glutPassiveMotionFunc(onMove);

#if  TIMER_ON == 1
	// timer event
	glutTimerFunc(TIMER_PERIOD, onTimer, 0);
#endif

	Init();
	intialiseStruct();
	glutMainLoop();
}
