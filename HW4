/*********
   CTIS164 - Template Source Program
----------
STUDENT : Hamza Rafi
SECTION :1
HOMEWORK:4

*********/

#ifdef _MSC_VER
#define _CRT_SECURE_NO_WARNINGS
#endif
#include <GL/glut.h>
#include <stdio.h>
#include <stdlib.h>
#include <math.h>
#include <string.h>
#include <stdarg.h>
#include "vec.h"

#define WINDOW_WIDTH  800
#define WINDOW_HEIGHT 600

#define TIMER_PERIOD  30 // Period for the timer.
#define TIMER_ON         1 // 0:disable timer, 1:enable timer

#define D2R 0.0174532
#define NUMLIGHTS 3

/* Global Variables for Template File */
bool up = false, down = false, right = false, left = false;
int  winWidth = WINDOW_WIDTH, winHeight = WINDOW_HEIGHT; // current Window width and height

typedef struct {
	float r, g, b;
} color_t;

typedef struct {
	vec_t   pos;
	color_t color;
	vec_t   vel;
} light_t;

typedef struct {
	vec_t pos;
	vec_t N;
} vertex_t;

vec_t vec1, 
	vec2, 
	vec3;

int angles[NUMLIGHTS] = {rand() % 360 ,rand() % 360 ,rand() % 360 }; //randam starting location
int direction[NUMLIGHTS] = { rand() % 2, rand() % 2 ,rand() % 2 };  //random rotation direction

bool totalAnimation = true;
bool animationRotation[NUMLIGHTS] = {true,true,true};
int i;
char cName[NUMLIGHTS][25] = { "RED","GREEN","BLUE" };

light_t lights[NUMLIGHTS] =
{
   { {  0,0 }, { 1, 0, 0 }, {80*cos(0 * D2R), fabs(angles[1])*sin(0 * D2R) + 25 } },
   { { (160*cos(angles[2] * D2R), fabs(angles[2])*sin(angles[2]*D2R) + 25) }, { 0, 1, 0 } ,{fabs(angles[2])*cos(angles[2]*D2R),fabs(angles[2])*sin(angles[2]*D2R) + 25} },
   { { (240*cos(angles[3] * D2R), fabs(angles[3])*sin(angles[3]*D2R) + 25) }, { 0, 0, 1 }}
};

color_t mulColor(float k, color_t c) {
	color_t tmp = { k * c.r, k * c.g, k * c.b };
	return tmp;
}

color_t addColor(color_t c1, color_t c2) {
	color_t tmp = { c1.r + c2.r, c1.g + c2.g, c1.b + c2.b };
	return tmp;
}

//vec.cpp added
double magV(vec_t v) {
	return sqrt(v.x * v.x + v.y * v.y);
}

double angleV(vec_t v) {
	double angle = atan2(v.y, v.x) * V_R2D;
	return angle < 0 ? angle + 360 : angle;
}

vec_t addV(vec_t v1, vec_t v2) {
	return{ v1.x + v2.x, v1.y + v2.y };
}

vec_t subV(vec_t v1, vec_t v2) {
	return{ v1.x - v2.x, v1.y - v2.y };
}

vec_t mulV(double k, vec_t v) {
	return{ k * v.x, k * v.y };
}

double dotP(vec_t v1, vec_t v2) {
	return v1.x * v2.x + v1.y * v2.y;
}

vec_t unitV(vec_t v) {
	return mulV(1.0 / magV(v), v);
}

// convert from polar representation to rectangular representation
vec_t pol2rec(polar_t p) {
	return{ p.magnitude * cos(p.angle * V_D2R),  p.magnitude * sin(p.angle * V_D2R) };
}

polar_t rec2pol(vec_t v) {
	return{ magV(v), angleV(v) };
}

double angleBetween2V(vec_t v1, vec_t v2) {
	double magV1 = magV(v1);
	double magV2 = magV(v2);
	double dot = dotP(v1, v2);
	double angle = acos(dot / (magV1 * magV2)) * V_R2D; // in degree
	return angle;
}
//vec.cpp end




//
// to draw circle, center at (x,y)
// radius r
//
void circle(int x, int y, int r)
{
#define PI 3.1415
	float angle;
	glBegin(GL_POLYGON);
	for (int i = 0; i < 100; i++)
	{
		angle = 2 * PI*i / 100;
		glVertex2f(x + r * cos(angle), y + r * sin(angle));
	}
	glEnd();
}

void circle_wire(int x, int y, int r)
{
#define PI 3.1415
	float angle;

	glBegin(GL_LINE_LOOP);
	for (int i = 0; i < 100; i++)
	{
		angle = 2 * PI*i / 100;
		glVertex2f(x + r * cos(angle), y + r * sin(angle));
	}
	glEnd();
}

void print(int x, int y, const char *string, void *font)
{
	int len, i;

	glRasterPos2f(x, y);
	len = (int)strlen(string);
	for (i = 0; i < len; i++)
	{
		glutBitmapCharacter(font, string[i]);
	}
}

// display text with variables.
// vprint(-winWidth / 2 + 10, winHeight / 2 - 20, GLUT_BITMAP_8_BY_13, "ERROR: %d", numClicks);
void vprint(int x, int y, void *font, const char *string, ...)
{
	va_list ap;
	va_start(ap, string);
	char str[1024];
	vsprintf_s(str, string, ap);
	va_end(ap);

	int len, i;
	glRasterPos2f(x, y);
	len = (int)strlen(str);
	for (i = 0; i < len; i++)
	{
		glutBitmapCharacter(font, str[i]);
	}
}

// vprint2(-50, 0, 0.35, "00:%02d", timeCounter);
void vprint2(int x, int y, float size, const char *string, ...) {
	va_list ap;
	va_start(ap, string);
	char str[1024];
	vsprintf_s(str, string, ap);
	va_end(ap);
	glPushMatrix();
	glTranslatef(x, y, 0);
	glScalef(size, size, 1);

	int len, i;
	len = (int)strlen(str);
	for (i = 0; i < len; i++)
	{
		glutStrokeCharacter(GLUT_STROKE_ROMAN, str[i]);
	}
	glPopMatrix();
}

//
// To display onto window using OpenGL commands
//

double distanceImpact(double d) {
	return (-1.0 / 350.0) * d + 1.0;
}

color_t calculateColor(light_t source, vertex_t v) {
	vec_t L = subV(source.pos, v.pos);
	vec_t uL = unitV(L);
	float factor = dotP(uL, v.N) * distanceImpact(magV(L));
	return mulColor(factor, source.color);
}

void middleCircle()
{
	glBegin(GL_TRIANGLE_FAN);
	glColor3f(0, 0, 0);
	glVertex2f(0, 0);
	float angle;

	for (int j = 0; j <= 100; j++) {
		angle = 2 * PI*j / 100;
		vec_t v = { 100 * cos(angle),100 * sin(angle) + 25 };
		vertex_t P = { { v.x, v.y } };

		P.N = unitV(subV({ v.x, v.y }, { 0, 0 }));
		color_t resetColour = { 0, 0, 0 };
		for (int k = 0; k < 3; k++) {
			resetColour = addColor(resetColour, calculateColor(lights[k], P));
		}

		glColor3f(resetColour.r, resetColour.g, resetColour.b);
		glVertex2f(v.x, v.y);
	}
	glEnd();

}



void drawOrbits(int num)
{
	glColor4ub(255,255,255,100);
	circle_wire(0,25, (i+2) * 70  );
}

void rotatingCircles(void)
{
	for ( i = 0; i < NUMLIGHTS; i++)
	{
		if (animationRotation[i])
		{
			drawOrbits(i);
			glColor3f(lights[i].color.r, lights[i].color.g, lights[i].color.b);
			circle(((i+2)* 70 )*cos(angles[i] * D2R), ((i + 2) * 70)*sin(angles[i]*D2R) +25, 25);
		}
	}


}

void background(void)
{	
	glColor3ub(0, 0, 0);
	glBegin(GL_QUADS);
	glVertex2f(400, 300);
	glVertex2f(-400, 300);
	glColor3ub(70, 70, 70);
	glVertex2f(-400, -300);
	glVertex2f(400, -300);
	glEnd();

	glColor3ub(255, 255, 255);
	vprint(-390, 280, GLUT_BITMAP_HELVETICA_12, "Homework #4");
	vprint(-390, 260, GLUT_BITMAP_HELVETICA_12, "By Hamza Rafi");

	glColor3ub(0, 0, 0);
	glBegin(GL_QUADS);
	glVertex2f(-400, -280);
	glVertex2f(400, -280);
	glVertex2f(400, -300);
	glVertex2f(-400, -300);
	glEnd();

	glColor3ub(255, 255, 255);
	if (totalAnimation)
		vprint(70, -293, GLUT_BITMAP_8_BY_13, "F4(Animation): ON");
	else
		vprint(70, -293, GLUT_BITMAP_8_BY_13, "F4(Animation): OFF");

	for ( i = 0; i < NUMLIGHTS; i++)
	{
		if (animationRotation[i])
			vprint(-390 + (i * 150), -293, GLUT_BITMAP_8_BY_13, "F%d(%s): ON", i + 1, cName[i]);
		else
			vprint(-390 + (i * 150), -293, GLUT_BITMAP_8_BY_13, "F%d(%s): OFF", i + 1, cName[i] );
	}
	vprint(250, -293, GLUT_BITMAP_8_BY_13, "F5: RESTART");
	
	vprint(-390, 280, GLUT_BITMAP_HELVETICA_12, "Homework #4");
	vprint(-390, 260, GLUT_BITMAP_HELVETICA_12, "By Hamza Rafi");
}

void display() {
	//
	// clear window to black
	//
	glClearColor(0, 0, 0, 0);
	glClear(GL_COLOR_BUFFER_BIT);

	background();

	middleCircle();
	rotatingCircles();

	glutSwapBuffers();
}

//
// key function for ASCII charachters like ESC, a,b,c..,A,B,..Z
//
void onKeyDown(unsigned char key, int x, int y)
{
	// exit when ESC is pressed.
	if (key == 27)
		exit(0);

	// to refresh the window it calls display() function
	glutPostRedisplay();
}

void onKeyUp(unsigned char key, int x, int y)
{
	// exit when ESC is pressed.
	if (key == 27)
		exit(0);

	// to refresh the window it calls display() function
	glutPostRedisplay();
}

//
// Special Key like GLUT_KEY_F1, F2, F3,...
// Arrow Keys, GLUT_KEY_UP, GLUT_KEY_DOWN, GLUT_KEY_RIGHT, GLUT_KEY_RIGHT
//
void onSpecialKeyDown(int key, int x, int y)
{
	// Write your codes here.
	switch (key) {
	case GLUT_KEY_UP: up = true; break;
	case GLUT_KEY_DOWN: down = true; break;
	case GLUT_KEY_LEFT: left = true; break;
	case GLUT_KEY_RIGHT: right = true; break;
	case GLUT_KEY_F1:
		animationRotation[0] = !animationRotation[0];
		break;
	case GLUT_KEY_F2:
		animationRotation[1] = !animationRotation[1];
		break;
	case GLUT_KEY_F3:
		animationRotation[2] = !animationRotation[2];
		break;
	case GLUT_KEY_F4:
		totalAnimation = !totalAnimation;
		break;
	case GLUT_KEY_F5:
	{
		for (i = 0; i < NUMLIGHTS; i++)
		{
			angles[i] = rand() % 360;
			direction[i] = rand() % 2;
		}
	};
	break;
	}

	// to refresh the window it calls display() function
	glutPostRedisplay();
}

//
// Special Key like GLUT_KEY_F1, F2, F3,...
// Arrow Keys, GLUT_KEY_UP, GLUT_KEY_DOWN, GLUT_KEY_RIGHT, GLUT_KEY_RIGHT
//
void onSpecialKeyUp(int key, int x, int y)
{
	// Write your codes here.
	switch (key) {
	case GLUT_KEY_UP: up = false; break;
	case GLUT_KEY_DOWN: down = false; break;
	case GLUT_KEY_LEFT: left = false; break;
	case GLUT_KEY_RIGHT: right = false; break;
	
	}

	// to refresh the window it calls display() function
	glutPostRedisplay();
}

//
// When a click occurs in the window,
// It provides which button
// buttons : GLUT_LEFT_BUTTON , GLUT_RIGHT_BUTTON
// states  : GLUT_UP , GLUT_DOWN
// x, y is the coordinate of the point that mouse clicked.
//
void onClick(int button, int stat, int x, int y)
{
	// Write your codes here.



	// to refresh the window it calls display() function
	glutPostRedisplay();
}

//
// This function is called when the window size changes.
// w : is the new width of the window in pixels.
// h : is the new height of the window in pixels.
//
void onResize(int w, int h)
{
	winWidth = w;
	winHeight = h;
	glViewport(0, 0, w, h);
	glMatrixMode(GL_PROJECTION);
	glLoadIdentity();
	glOrtho(-w / 2, w / 2, -h / 2, h / 2, -1, 1);
	glMatrixMode(GL_MODELVIEW);
	glLoadIdentity();
	display(); // refresh window.
}

void onMoveDown(int x, int y) {
	// Write your codes here.



	// to refresh the window it calls display() function   
	glutPostRedisplay();
}

// GLUT to OpenGL coordinate conversion:
//   x2 = x1 - winWidth / 2
//   y2 = winHeight / 2 - y1
void onMove(int x, int y) {
	// Write your codes here.



	// to refresh the window it calls display() function
	glutPostRedisplay();
}

#if TIMER_ON == 1
void onTimer(int v) {

	glutTimerFunc(TIMER_PERIOD , onTimer, 0);
	// Write your codes here.

	if (totalAnimation) {

		for ( i = 0; i < NUMLIGHTS; i++)
		{
			if (animationRotation[i])
			{
				if (direction[i] == 0)  // anticlockwise rotation
				{
					angles[i] = angles[i] + rand() % 5;    //random speed used
					if (angles[i] > 360)
						angles[i] = angles[i] % 360;
				}
				if (direction[i] == 1)  //clockwise rotation
				{
					angles[i] = angles[i] - rand() % 5;    //random speed used
					if (angles[i] < -360)
						angles[i] = angles[i] % 360;
				}
			}
		}
	}

	for ( i = 0; i < NUMLIGHTS; i++)
	{
		if (!animationRotation[i])
		{
			lights[i].color.r = 0;
			lights[i].color.g = 0;
			lights[i].color.b = 0;
		}
		else
		{
			lights[0].color.r = 1;
			lights[1].color.g = 1;
			lights[2].color.b = 1;
		} 

	}
	
	vec1.x = 140*cos(angles[0]*D2R);
	vec1.y = 140*sin(angles[0]*D2R);
	lights[0].pos = vec1;
	
	vec2.x = 210*cos(angles[1]*D2R);
	vec2.y = 210*sin(angles[1]*D2R);
	lights[1].pos = vec2;
	
	vec3.x = 280*cos(angles[2]*D2R);
	vec3.y = 280*sin(angles[2]*D2R);
	lights[2].pos = vec3;





	// to refresh the window it calls display() function
	glutPostRedisplay(); // display()

}
#endif

void Init() {

	// Smoothing shapes
	glEnable(GL_BLEND);
	glBlendFunc(GL_SRC_ALPHA, GL_ONE_MINUS_SRC_ALPHA);

}

void main(int argc, char *argv[]) {
	glutInit(&argc, argv);
	glutInitDisplayMode(GLUT_RGB | GLUT_DOUBLE);
	glutInitWindowSize(WINDOW_WIDTH, WINDOW_HEIGHT);
	//glutInitWindowPosition(100, 100);
	glutCreateWindow("HW#4 By HAMA RAFI");

	glutDisplayFunc(display);
	glutReshapeFunc(onResize);

	//
	// keyboard registration
	//
	glutKeyboardFunc(onKeyDown);
	glutSpecialFunc(onSpecialKeyDown);

	glutKeyboardUpFunc(onKeyUp);
	glutSpecialUpFunc(onSpecialKeyUp);

	//
	// mouse registration
	//
	glutMouseFunc(onClick);
	glutMotionFunc(onMoveDown);
	glutPassiveMotionFunc(onMove);

#if  TIMER_ON == 1
	// timer event
	glutTimerFunc(TIMER_PERIOD, onTimer, 0);
#endif

	Init();

	glutMainLoop();
}
